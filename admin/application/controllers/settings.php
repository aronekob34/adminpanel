<?phpdefined('BASEPATH') OR ( 'No direct script access allowed' );/** * Properties controller will handle all features related to public properties listing * and searching. */class Settings extends MY_Controller {    function __construct() {        parent :: __construct();//        $this->_layout('default');////    	$this->load->library('image_lib');//        $userdata = $this->session->all_userdata();//        if ( !isset( $userdata['logged_in'] ) || !$userdata['logged_in']  )////        {////            $this->session->set_flashdata( 'errors', 'Your session has been expired,////                login again to access your account' );////////            redirect( base_url() . 'Login' );////        }        $this->load->model('common_model');//        $this->load->model( 'dash_board_model' );//        $this->load->model( 'property_model' );//        $this->load->library( 'pagination' );//        $this->_layout('default');////        $userdata = $this->session->all_userdata();////        if ( !isset( $userdata['logged_in'] ) )////        {////            $this->session->set_flashdata( 'errors', 'Your session has been expired,////                login again to access your account' );////////            redirect( base_url() . 'Login' );////        }    }    /**     * Landing page of properties, this will display all the properties and paginate them     */    function index() {        // $page = ($this->uri->segment( 3 )) ? $this->uri->segment( 3 ) : 0;        // $config['base_url']       = base_url() . 'properties/index/';        // $config['total_rows']     = intval( $this->property_model->find_all( '', '', true ) );        // $config['per_page']       = MAX_LIMIT;        // $config['page']           = $page;        // $this->pagination->initialize( $config );        // $this->data["pagination"] = $this->pagination->create_links();        // $this->data["properties"] = $this->property_model->find_all( $page, MAX_LIMIT );        $this->_view("front_end/property_view_all");    }    function changepassword() { //          $userdata = $this->session->all_userdata();////         print_r($userdata);super_admin////         die();            if ($this->input->server('REQUEST_METHOD') == 'POST' && $this->form_validation->run('change_password')) {                $id=$this->session->userdata['logged_in']['user_id'];                $updated_data['password']=$this->input->post('n_password');                              if ($this->common_model->update_data('id', $id, 'users',$updated_data)) {                  $this->session->set_flashdata('update', 'successfully updated...');                  redirect(base_url() . 'Settings/changepassword');              }            }                        $where['id']=$this->session->userdata['logged_in']['user_id'];             $this->data['all_data'] = $this->common_model->query_multiple_row_by_multiple_source('users', $where);            $this->_view("admin/changepassword");    }    function changepic(){                           if ($this->input->server('REQUEST_METHOD') == 'POST') {            $id = $this->session->userdata['logged_in']['user_id'];            if (!empty($_FILES['userfile']['name'])) {                $this->load->library('upload');                $array2 = $this->images_upload_function($_FILES['userfile']['name']);                if ($array2 != "ERROR" ) {                    $source_path = $array2['full_path'];                    $target_path = "./uploads/thumb/";                    $get_file_name_thumb = base_url() . "uploads/thumb/" . $array2['raw_name'] . "_thumb" . $array2['file_ext'];                    $config_manip = array(                        'image_library' => 'gd2',                        'source_image' => $source_path,                        'new_image' => $target_path,                        'maintain_ratio' => TRUE,                        'create_thumb' => TRUE,                        'thumb_marker' => '_thumb',                        'width' => 215,                        'height' => 215                    );                    $this->image_lib->initialize($config_manip);                    if (!$this->image_lib->resize()) {                        echo $this->image_lib->display_errors();                        die();                        $array2 = "ERROR";                    }                    // clear //                    $this->image_lib->clear();                }                if ($array2 != "ERROR") {                    $post_data = Array(                                                'image' => @$get_file_name_thumb                                           );                    //print_r($post_data);                    //die();                    if ($insert_id = $this->common_model->update_data('id', $id, 'users',$post_data) ) {                                               // $this->session->user                        $this->session->userdata['logged_in']['image']=$get_file_name_thumb;                        $this->session->set_flashdata('success', 'Successfully added to database');                        redirect(base_url() . 'Settings/changepic');                    }                } else {                    $this->session->set_flashdata('errors', 'ERROR occured !');                    redirect(base_url() . 'Settings/changepic');                }            }        }        $where['id']=$this->session->userdata['logged_in']['user_id'];             $this->data['all_data'] = $this->common_model->query_multiple_row_by_multiple_source('users', $where);            $this->_view("admin/changepic");            }    private function images_upload_function($image_file){				if(!empty($_FILES['userfile']['name'])){			$files = $_FILES;			$_FILES['userfile']['name']= $files['userfile']['name'];			$_FILES['userfile']['type']= $files['userfile']['type'];			$_FILES['userfile']['tmp_name']= $files['userfile']['tmp_name'];			$_FILES['userfile']['error']= $files['userfile']['error'];			$_FILES['userfile']['size']= $files['userfile']['size'];    			$this->upload->initialize($this->set_upload_options_2());			if($this->upload->do_upload()){			$file_name=$this->upload->data();			return $file_name;            			}else{								return "ERROR";			}						}	}        private function set_upload_options_2(){		                        $config = array();                        $config['upload_path'] = './uploads/';                        $config['allowed_types'] = 'JPEG|JPEG|gif|jpg|png';                        $config['max_size'] = '0';                        $config['overwrite'] = FALSE;                        $config['encrypt_name'] = TRUE;                        $config['max_width'] = '1024';                        $config['max_height'] = '768';                        return $config;    }        function changeemail() { //          $userdata = $this->session->all_userdata();////         print_r($userdata);super_admin////         die();            if ($this->input->server('REQUEST_METHOD') == 'POST' && $this->form_validation->run('change_email')) {                $id=$this->session->userdata['logged_in']['user_id'];                $updated_data['email']=$this->input->post('n_email');                              if ($this->common_model->update_data('id', $id, 'users',$updated_data)) {                  $this->session->set_flashdata('update', 'successfully updated...');                  redirect(base_url() . 'Settings/changeemail');              }            }                        $where['id']=$this->session->userdata['logged_in']['user_id'];             $this->data['all_data'] = $this->common_model->query_multiple_row_by_multiple_source('users', $where);            $this->_view("admin/changeemail");    }    public function _is_valid_password($str){                $this->load->library('form_validation');        $where['id']=$this->session->userdata['logged_in']['user_id'];                $where['password']=$this->input->post('c_password',TRUE);         $data['all_data'] = $this->common_model->query_multiple_row_by_multiple_source('users', $where);                if(!empty( $data['all_data'])){          return true;                }           // print_r($data);             $this->form_validation->set_message('_is_valid_password','Current password did not match');            return FALSE;            }    public function expense(){                 // This function will handle all search related functionality        //  $this->set_title( 'New User - ' . lang( 'site_name' ) );                       if ($this->input->server('REQUEST_METHOD') == 'POST' && $this->form_validation->run('color_code')) {             $id=$this->session->userdata['logged_in']['user_id'];            $post_data = Array(                'title' => $this->input->post('title'),                'created_by' => $id,                'row_status' => 1,                'created_date' => date("Y-m-d H:i:s ")            );            //print_r($post_data);            //die();            if ($insert_id = $this->common_model->add_data('expense_type', $post_data)) {                $this->session->set_flashdata('success', 'Successfully added to database');                redirect(base_url() . 'Settings/expense');            }        }        $where['row_status'] = 1;        $this->data['all_data'] = $this->common_model->query_multiple_row_by_multiple_source('expense_type', $where);        $this->_view('expense_type/index');    }    /**     * Displays details of the property based on property id     */    public function colorcode(){                 // This function will handle all search related functionality        //  $this->set_title( 'New User - ' . lang( 'site_name' ) );                $this->add_style( assets( 'plugins/timepicker/bootstrap-timepicker.min.css' ) );        $this->add_script( assets( 'plugins/colorpicker/bootstrap-colorpicker.min.js' ) );               $this->set_title('Color Code');        if ($this->input->server('REQUEST_METHOD') == 'POST' && $this->form_validation->run('color_code')) {            $post_data = Array(                'title' => $this->input->post('title'),                'color' => $this->input->post('color_cat1'),                'row_status' => 1,                'created_date' => date("Y-m-d H:i:s ")            );            //print_r($post_data);            //die();            if ($insert_id = $this->common_model->add_data('color_code', $post_data)) {                $this->session->set_flashdata('success', 'Successfully added to database');                redirect(base_url() . 'Settings/colorcode');            }        }        $where['row_status'] = 1;        $this->data['all_data'] = $this->common_model->query_multiple_row_by_multiple_source('color_code', $where);        $this->_view('color_code/index');    }    /**     * Search property     */    public function newuser() {        // This function will handle all search related functionality        //  $this->set_title( 'New User - ' . lang( 'site_name' ) );        $this->set_title('New User ');        if ($this->input->server('REQUEST_METHOD') == 'POST' && $this->form_validation->run('new_users')) {            $post_data = Array(                'first_name' => $this->input->post('name'),                'password' => $this->input->post('password'),                'email' => $this->input->post('email_address'),                'user_type' =>"normal",                'active' => 1,                'created_date' => date("Y-m-d H:i:s ")            );            //print_r($post_data);            //die();            if ($insert_id = $this->common_model->add_data('users', $post_data)) {                $this->session->set_flashdata('success', 'Successfully added to database');                redirect(base_url() . 'Settings/newuser');            }        }        $where['active'] = 1;        $where['user_type'] = "normal";        $this->data['all_data'] = $this->common_model->query_multiple_row_by_multiple_source('users', $where);        $this->_view('newuser/index');    }        public function category() {        // This function will handle all search related functionality        //  $this->set_title( 'New User - ' . lang( 'site_name' ) );                $this->set_title('Category');        if ($this->input->server('REQUEST_METHOD') == 'POST' && $this->form_validation->run('category')) {                     $post_data = Array(                'title' => $this->input->post('title'),                'row_status' => 1,                'created_date' => date("Y-m-d H:i:s "),                'color_code'=>$_POST['color_cat1']            );            //print_r($post_data);            //die();            if ($insert_id = $this->common_model->add_data('category', $post_data)) {                $this->session->set_flashdata('success', 'Successfully added to database');                redirect(base_url() . 'Settings/category');            }        }        $where['row_status'] = 1;        $this->data['all_data'] = $this->common_model->query_multiple_row_by_multiple_source('category', $where);        $this->_view('category/index');    }        public function notecategory() {        // This function will handle all search related functionality        //  $this->set_title( 'New User - ' . lang( 'site_name' ) );                $this->set_title('Category');        if ($this->input->server('REQUEST_METHOD') == 'POST' && $this->form_validation->run('category')) {                     $post_data = Array(                'title' => $this->input->post('title'),                'row_status' => 1,                'created_date' => date("Y-m-d H:i:s "),                'color_code'=>$_POST['color_cat1']            );            //print_r($post_data);            //die();            if ($insert_id = $this->common_model->add_data('note_category', $post_data)) {                $this->session->set_flashdata('success', 'Successfully added to database');                redirect(base_url() . 'Settings/notecategory');            }        }        $where['row_status'] = 1;        $this->data['all_data'] = $this->common_model->query_multiple_row_by_multiple_source('note_category', $where);        $this->_view('category/noteindex');    }    public function edituser(){                 if ($this->input->server('REQUEST_METHOD') == 'POST' && $this->form_validation->run('new_users_edit')) {                                     $update_id=  $this->input->post('update_id');//              //                $where['id'] =$update_id;//                $this->data['all_data'] = $this->common_model->query_multiple_row_by_multiple_source('users', $where);//                //                                                    $post_data = Array(                'first_name' => $this->input->post('name'),                'password' => $this->input->post('password')                //'email' => $this->input->post('email_address'),            );            //print_r($post_data);            //die();            if ($insert_id = $this->common_model->update_data('id', $update_id, 'users',$post_data)) {                $this->session->set_flashdata('success', 'Successfully updated to database');                redirect(base_url() . 'Settings/edituser/'.$update_id);            }        }                                 $id=  $this->uri->segment(3);         $where['id'] =$id;         $this->data['all_data'] = $this->common_model->query_multiple_row_by_multiple_source('users', $where);         $this->_view('newuser/edit');            }    public function editexpense(){                                               if ($this->input->server('REQUEST_METHOD') == 'POST' && $this->form_validation->run('color_code')) {                              $update_id=  $this->input->post('update_id');            $post_data = Array(                'title' => $this->input->post('title')            );            //echo $update_id;            $insert_id = $this->common_model->update_data('id', $update_id, 'expense_type',$post_data);                                   if ($insert_id = $this->common_model->update_data('id', $update_id, 'expense_type',$post_data)) {                $this->session->set_flashdata('success', 'Successfully updated to database');                redirect(base_url() . 'Settings/editexpense/'.$update_id);            }                    }                                                 $id=  $this->uri->segment(3);       //  echo $id;         $where['id'] =$id;         $this->data['all_data'] = $this->common_model->query_multiple_row_by_multiple_source('expense_type', $where);         $this->_view('expense_type/edit');                        }    public function editcat(){                if ($this->input->server('REQUEST_METHOD') == 'POST' && $this->form_validation->run('category')) {            $update_id=  $this->input->post('update_id');            $post_data = Array(                'title' => $this->input->post('title'),                'color_code' => $_POST['color_cat1']            );            //print_r($post_data);            //die();            if ($insert_id = $this->common_model->update_data('id', $update_id, 'category',$post_data)) {                $this->session->set_flashdata('success', 'Successfully updated to database');                redirect(base_url() . 'Settings/editcat/'.$update_id);            }        }                                 $id=  $this->uri->segment(3);         $where['id'] =$id;         $this->data['all_data'] = $this->common_model->query_multiple_row_by_multiple_source('category', $where);         $this->_view('category/edit');            }         public function editnotecat(){                if ($this->input->server('REQUEST_METHOD') == 'POST' && $this->form_validation->run('category')) {            $update_id=  $this->input->post('update_id');            $post_data = Array(                'title' => $this->input->post('title'),                'color_code' => $_POST['color_cat1']            );            //print_r($post_data);            //die();            if ($insert_id = $this->common_model->update_data('id', $update_id, 'note_category',$post_data)) {                $this->session->set_flashdata('success', 'Successfully updated to database');                redirect(base_url() . 'Settings/editnotecat/'.$update_id);            }        }                                 $id=  $this->uri->segment(3);         $where['id'] =$id;         $this->data['all_data'] = $this->common_model->query_multiple_row_by_multiple_source('note_category', $where);         $this->_view('category/noteedit');            }    public function deleteItem(){		                        $id=$this->uri->segment(3);                         $this->common_model->delete_data('id', $id, 'users');                        $this->session->set_flashdata( 'delete', 'successfully deleted... ' );                        redirect( base_url() . 'Settings/newuser' );                              	}        public function deleteexpense(){		                        $id=$this->uri->segment(3);                         $this->common_model->delete_data('id', $id, 'expense_type');                        $this->session->set_flashdata( 'delete', 'successfully deleted... ' );                        redirect( base_url() . 'Settings/expense' );                              	}    public function deleteCategory(){                                $id=$this->uri->segment(3);                                             $this->common_model->delete_data('id', $id, 'category');                        $this->session->set_flashdata( 'delete', 'successfully deleted... ' );                        redirect( base_url() . 'Settings/category' );                           }    public function deletenoteCategory(){                                $id=$this->uri->segment(3);                                             $this->common_model->delete_data('id', $id, 'note_category');                        $this->session->set_flashdata( 'delete', 'successfully deleted... ' );                        redirect( base_url() . 'Settings/notecategory' );                           }    public function deletecolorcode(){                                $id=$this->uri->segment(3);                                             $this->common_model->delete_data('id', $id, 'color_code');                        $this->session->set_flashdata( 'delete', 'successfully deleted... ' );                        redirect( base_url() . 'Settings/colorcode' );                           }}