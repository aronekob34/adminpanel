<?php/** * Common Model Class  *  */class Common_model extends CI_Model {    /**     * Model constructor      *      */    function __construct() {        parent::__construct();    }    public function query_all_rows_selected_fields_where2($table, $fields, $where) {        $this->db->select($fields);        $query = $this->db->get_where($table, $where);        if ($query) {            return $query->result();        }        else            return FALSE;    }    public function show_event($table, $own_id, $start_date, $end_date) {        $sql = "                    SELECT                      n.title as maintitle,n.id as id,n.created_date as start,asign.color,n.description,n.category,CONCAT_WS('-',n.start_time,n.end_time) as StartEndTime,n.start_time,n.end_time                    FROM notes as n inner join assign_notes as asign                    ON n.id=asign.note_id                    WHERE (n.created_date BETWEEN '$start_date' AND '$end_date') AND asign.assigned_to=$own_id ";        $query = $this->db->query($sql);                $data1 = (array) $query->result();                if(!empty($data1)){            for ($i = 0; $i < count($data1); $i++) {                $data1[$i]->title = $data1[$i]->maintitle.' '.$data1[$i]->StartEndTime;            }        }                $sql2 = "SELECT  title as maintitle,id,created_date as start,color,description,category,CONCAT_WS('-',start_time,end_time) as StartEndTime,start_time,end_time                    FROM $table                    WHERE (created_date BETWEEN '$start_date' AND '$end_date') AND created_by=$own_id ";        $query2 = $this->db->query($sql2);        $data = (array) $query2->result();                if(!empty($data)){            for ($i = 0; $i < count($data); $i++) {                $data[$i]->title = $data[$i]->maintitle.' '.$data[$i]->StartEndTime;            }        }        $rs = array_merge($data1, $data);//         print_r($rs); exit();        return $rs;    }    /*     * ******** assign me or by ******************************** */    public function assign_me_or_by($note_id, $assigned_me) {        $sql = "                    SELECT                      n.id,n.first_name,n.last_name,n.email,asign.assigned_by as assigned_to_by                    FROM                     users as n                     inner join                     assign_notes as asign                    ON n.id=asign.assigned_by                    WHERE asign.note_id=$note_id AND assigned_to=$assigned_me "; // assign to me        $query = $this->db->query($sql);        $data = (array) $query->result();        $sql2 = "                    SELECT                      n.id,n.first_name,n.last_name,n.email,asign.assigned_by as assigned_to_by                    FROM                     users as n                     inner join                     assign_notes as asign                    ON n.id=asign.assigned_to                    WHERE asign.note_id=$note_id AND assigned_by=$assigned_me "; // assign to others        $query2 = $this->db->query($sql2);        $data2 = (array) $query->result();        $data = (array) $query2->result();        $rs = array_merge($data2, $data);        return $rs;    }    /*     * ******** assign me or by ******************************** */    public function assign($assigned_me) {        $sql = "                    SELECT                      n.first_name,                    n.last_name,                    n.email,                    asign.assigned_by as assigned_to_by,notes.title,notes.description,notes.id as note_id                    FROM                     users as n                     inner join assign_notes as asign ON n.id=asign.assigned_by                    inner join notes ON notes.id=asign.note_id                    WHERE asign.assigned_to=$assigned_me "; // assign to me        $query = $this->db->query($sql);        $data = (array) $query->result();        $sql2 = "                    SELECT                      n.first_name,n.last_name,n.email,asign.assigned_by as assigned_to_by,notes.title,notes.description,notes.id as note_id                    FROM                     users as n                     inner join assign_notes as asign ON n.id=asign.assigned_to                    inner join notes ON notes.id=asign.note_id                    WHERE asign.assigned_by=$assigned_me "; // assign to others        $query2 = $this->db->query($sql2);        $data2 = (array) $query->result();        $data = (array) $query2->result();        $rs = array_merge($data2, $data);        return $rs;    }    public function query_multiple_row_by_multiple_source_fixed($table, $multiple_source_data, $limit, $order_by) {        $this->db->select('*');        $this->db->where($multiple_source_data);        $this->db->from($table);        $this->db->limit($limit);        $this->db->order_by($order_by . " DESC");        $query = $this->db->get();        return $query->result();    }    public function query_multiple_row_by_multiple_source_by_date($table, $multiple_source_data) {        $this->db->select('*');        $this->db->where($multiple_source_data);        $this->db->from($table);        $this->db->order_by("created_date DESC");        $query = $this->db->get();        return $query->result();    }    public function select_all_data($table) {        $this->db->select('*');        $this->db->from($table);        $this->db->order_by("created_at DESC");        $query = $this->db->get();        return $query->result();    }    public function query_all_rows_selected_fields_where($table, $fields, $target_field, $source_data) {        $this->db->select($fields);        $query = $this->db->get_where($table, array($target_field => $source_data));        return $query->result();    }    public function query_all_rows_selected_fields_wheretst($table, $fields, $target_field, $source_data) {        $this->db->select($fields);        $query = $this->db->get($table);        if ($query) {            return $query->result();        }        else            return FALSE;    }    public function query_multiple_row_by_multiple_source($table, $multiple_source_data) {        $this->db->select('*');        $this->db->where($multiple_source_data);        $this->db->from($table);        $query = $this->db->get();        return $query->result();    }    /**     * return number of rows in a table      * Author: Mushrefa Islam     */    function row_count($table, $where = NULL) {        if ($where != NULL)            $this->db->where($where);        return $this->db->count_all_results($table);    }    public function add_data($sql_table, $data_set) {        $this->db->insert($sql_table, $data_set);        if ($this->db->affected_rows())            return $this->db->insert_id();        else            return false;    }    public function update_data($field_name, $field_data, $table_name, $updated_data) {        $this->db->where($field_name, $field_data);        $this->db->update($table_name, $updated_data);        if ($this->db->affected_rows())            return true;        else            return false;    }    public function delete_data($field_name, $field_data, $table_name) {        $this->db->delete($table_name, array($field_name => $field_data));        if ($this->db->affected_rows())            return true;        else            return false;    }    public function query_all_data($table, $table_field, $value) {        $query = $this->db->where($table_field, $value);        $query = $this->db->get($table);        if ($query) {            return $query->result();        }        else            return FALSE;    }    public function query_all_data_groups($table, $table_field1, $value1, $table_field2, $value2) {        $query = $this->db->where($table_field1, $value1);        $query = $this->db->where($table_field2, $value2);        $query = $this->db->get($table);        return $query->result();    }    function get_all_data($table, $field_name, $value, $order, $limitStart, $recQnty) {        $sql = "SELECT * FROM $table WHERE $field_name = $value ORDER BY $order ASC LIMIT $limitStart,$recQnty";        $query = $this->db->query($sql);        $result = $query->result();        return $result;    }    function query_get_single_data($table, $target_field, $source_data) {        $this->db->select('*');        $this->db->where($target_field, $source_data);        $this->db->limit(1);        $this->db->from($table);        $query = $this->db->get();        $result = $query->result();        return $result;    }    public function gets_all_data_as_string($table, $index_field, $value_field) {        $query = $this->db->get($table);        $data = $query->result();        $num_of_items = count($data);        $data_string = '';        if ($num_of_items) {            $i = 0;            foreach ($data as $d) {                $i++;                $data_string .= $d->$index_field . ':' . $d->$value_field;                if ($i < $num_of_items)                    $data_string .= ';';            }        }        return $data_string;    }    public function query_sorted_data($table, $sort_by) {        $this->db->select('*');        $this->db->from($table);        $this->db->order_by($sort_by);        $query = $this->db->get();        return $query->result();    }    public function query_single_data($table, $target_field, $source_data, $desired_data) {        $this->db->select($desired_data);        $this->db->where($target_field, $source_data);        $this->db->limit(1);        $this->db->from($table);        $query = $this->db->get();        $row = $query->row();        if ($row) {            return $row->$desired_data;        }        else            return FALSE;    }    public function query_single_row_by_single_source($table, $target_field, $source_data) {        $this->db->select('*');        $this->db->where($target_field, $source_data);        $this->db->limit(1);        $this->db->from($table);        $query = $this->db->get();        if ($query) {            return $query->row();        }        else            return FALSE;    }    public function query_single_row_by_multiple_source($table, $multiple_source_data) {        $this->db->select('*');        $this->db->where($multiple_source_data);        $this->db->limit(1);        $this->db->from($table);        $query = $this->db->get();        if ($query) {            return $query->row();        }        else            return FALSE;    }    public function query_multiple_rows_by_single_source($table, $target_field, $source_data) {        $this->db->select('*');        $this->db->where($target_field, $source_data);        $this->db->from($table);        $query = $this->db->get();        if ($query) {            return $query->result();        }        else            return FALSE;    }    public function num_of_data($table, $wh) {        if (!empty($wh))            $query = $this->db->query("SELECT * FROM " . $table . " " . $wh);        else {            $this->db->select('*');            $this->db->from($table);            $query = $this->db->get();        }        $number_of_matches = $query->num_rows();        return $number_of_matches;    }    public function get_unique_numeric_id($check_table, $check_field, $is_activation_code = false) {        // creates a random id        $random_unique_int = mt_rand(1000000000000000, 9999999999999999);        if ($random_unique_int < 0)            $random_unique_int *= (-1);        // Make sure the random id isn't already in use        $this->db->select($check_field);        $this->db->where($check_field, $random_unique_int);        $this->db->limit(1);        $this->db->from($check_table);        $query = $this->db->get();        if ($query->num_rows() > 0) {            $query->free_result();            // If the random id is already in use, get a new number            $this->get_unique_numeric_id($check_table, $check_field);        }        if ($is_activation_code)            return substr($random_unique_int, 0, 4);        else            return $random_unique_int;    }    public function get_top_bar_menus($controller, $function) {        $this->db->select('*');        $this->db->where(array('is_active' => 1, 'parent_menu' => NULL));        $this->db->where_in('controller_name', array($controller, ''));        $this->db->where_in('function_name', array($function, ''));        $this->db->from('top_bar_menus');        $this->db->order_by('order', 'asc');        $query = $this->db->get();        if ($query) {            return $query->result();        }        else            return FALSE;    }    public function get_top_bar_moremenus($controller, $function) {        $this->db->select('*');        $this->db->where('is_active', 1);        $this->db->where('parent_menu !=', 'NULL');        $this->db->where_in('controller_name', array($controller, ''));        $this->db->where_in('function_name', array($function, ''));        $this->db->from('top_bar_menus');        $this->db->order_by('order', 'asc');        $query = $this->db->get();        if ($query) {            return $query->result();        }        else            return FALSE;    }    function batch_insert($table_name, $data) {        $this->db->insert_batch($table_name, $data);        return $this->db->insert_id();    }    public function get_upcoming_event($table, $id) {        $evnt_date = date("Y-m-d", time());        $sql = "SELECT * from $table where event_date > '$evnt_date' AND created_by=$id";        $query = $this->db->query($sql);        return $query->result();    }}/* End of file common_model.php *//* Location: ./application/models/common_model.php */